 devtools::load_all()
load('data/dataForGcvLwls.RData')
  optns = CreateOptions() 
# FPCA checks the data validity for the PCA function. 
 if( CheckData(y,t) ){
   cat('FPCA has stopped.')
   return(FALSE);
 }  
 # FPCA sets the options structure that are still NULL
 optns = SetOptions(y, t, optns);
 
 # FPCA checks the options validity for the PCA function. 
 numOfCurves = length(y);
 if( CheckOptions(t, optns,numOfCurves) ){
   cat('FPCA has stopped.')
   return(FALSE);
 }
 # Bin the data (potentially):
 if ( optns$useBinnedData != 'OFF'){ 
     BinnedDataset <GetBinnedDataset(y,t,optns)
     y = BinnedDataset$newy;
     t = BinnedDataset$newt; 
 }
 # Generate basic grids:
 # obsGrid:  the unique sorted pooled time points of the sample and the new data
 # regGrid: the grid of time points for which the smoothed covariance surface assumes values
 obsGrid = sort(unique( c(unlist(t), optns$newdata)));
 regGrid = seq(min(obsGrid), max(obsGrid),length.out = optns$nRegGrid);
 # Get the smoothed mean curve
 smcObj = GetSmoothedMeanCurve(y, t, obsGrid, regGrid, optns)
 # Get the smoothed covariance surface
 # mu: the smoothed mean curve evaluated at times 'obsGrid'
 mu = smcObj$mu
# TODO: pass in only the options needed, rather than p itself.
  dataType <- optns$dataType
  error <- optns$error
  kern <- optns$kernel
  bwuserCov <- optns$bwuserCov
  bwuserCovGcv <- optns$bwuserCovGcv
  verbose <- optns$verbose
# get the truncation of the output grids.
  outPercent <- optns$outPercent
  buff <- .Machine$double.eps * 10
  rangeGrid <- range(regGrid)
  minGrid <- rangeGrid[1]
  maxGrid <- rangeGrid[2]
  cutRegGrid <- regGrid[regGrid > minGrid + diff(rangeGrid) * outPercent[1] -
                        buff & 
                        regGrid < minGrid + diff(rangeGrid) * outPercent[2] +
                        buff]
  # Get raw covariance   
  rcov <- GetRawCov(y, t, obsGrid, mu, dataType, error)
rcov$tPairs
ls
ls()
rangeGrid
obsGrid
minGrid
cutRegGrid
bwuserCovGcv
bwmuLocal
bw
bw = c(2.071354057811460, 2.071354057811460)
kern
kernel = 'epan'
summar(rcov)
summary(rcov)
bw
InputFormMllwlskInCpp <- list()
InputFormMllwlskInCpp$bw = bw
InputFormMllwlskInCpp
InputFormMllwlskInCpp$kernel = 'epan';
InputFormMllwlskInCpp
InputFormMllwlskInCpp$tPairs = rcov$tPairs
InputFormMllwlskInCpp$tPairs
rcov$indz
rcov$indx
rcov$diag
rcov
InputFormMllwlskInCpp <- list()
InputFormMllwlskInCpp$bw = bw
InputFormMllwlskInCpp$kernel = 'epan';
InputFormMllwlskInCpp$tPairs = rcov$tPairs
ls()
reg

sum(regGrid)
InputFormMllwlskInCpp$regGrid = linspace(min(regGrid), max(regGrid), 30)
InputFormMllwlskInCpp$regGrid = linspace(min(regGrid), max(regGrid), 51)
InputFormMllwlskInCpp
InputFormMllwlskInCpp$win = rep(1,38)
InputFormMllwlskInCpp$win
InputFormMllwlskInCpp$tPairs
InputFormMllwlskInCpp\
InputFormMllwlskInCpp
names(InputFormMllwlskInCpp)
rcov$cxxn
savehistory()
savehistory('asdf.Rhistory')
